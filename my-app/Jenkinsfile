pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'NodeJS-18'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
    }
    
    stages {
        stage('Cleanup') {
            steps {
                script {
                    // Clean workspace
                    sh 'rm -rf node_modules'
                    sh 'rm -rf coverage'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Install project dependencies
                    sh '''
                    npm cache clean --force
                    npm install
                    
                    # Install testing dependencies
                    npm install --save-dev \
                        jest \
                        @testing-library/react \
                        @testing-library/jest-dom \
                        jest-environment-jsdom \
                        babel-jest \
                        identity-obj-proxy \
                        @babel/preset-env \
                        @babel/preset-react
                    '''
                }
            }
        }

        stage('Create Configuration Files') {
            steps {
                script {
                    // Create Jest configuration file
                    writeFile file: 'jest.config.js', text: '''
module.exports = {
    testEnvironment: 'jsdom',
    setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
    moduleNameMapper: {
        '\\\\.(css|less|scss|sass)$': 'identity-obj-proxy',
        '\\\\.(jpg|jpeg|png|gif|webp|svg)$': '<rootDir>/__mocks__/fileMock.js'
    },
    transform: {
        '^.+\\\\.(js|jsx|ts|tsx)$': 'babel-jest'
    },
    collectCoverage: true,
    coverageDirectory: 'coverage',
    coverageReporters: ['text', 'lcov', 'cobertura'],
    reporters: [
        'default',
        ['jest-junit', { 
            outputDirectory: 'test-results',
            outputName: 'junit.xml' 
        }]
    ]
};
                    '''

                    // Create Babel configuration
                    writeFile file: '.babelrc', text: '''
{
    "presets": [
        "@babel/preset-env",
        ["@babel/preset-react", {"runtime": "automatic"}]
    ]
}
                    '''

                    // Create Jest setup file
                    writeFile file: 'jest.setup.js', text: '''
import '@testing-library/jest-dom';
                    '''

                    // Create file mock
                    sh 'mkdir -p __mocks__'
                    writeFile file: '__mocks__/fileMock.js', text: '''
module.exports = 'test-file-stub';
                    '''
                }
            }
        }

        stage('Run Jest Tests') {
            steps {
                script {
                    // Install Jest JUnit reporter
                    sh 'npm install --save-dev jest-junit'

                    // Run Jest tests with JUnit and coverage reporting
                    sh '''
                    mkdir -p test-results
                    npm test -- \
                        --config=jest.config.js \
                        --coverage \
                        --coverageReporters=text \
                        --coverageReporters=lcov \
                        --coverageReporters=cobertura \
                        --reporters=default \
                        --reporters=jest-junit
                    '''
                }
            }
            post {
                always {
                    // Publish test results
                    junit allowEmptyResults: true, testResults: 'test-results/junit.xml'
                    
                    // Publish coverage reports
                    cobertura coberturaReportFile: 'coverage/cobertura-coverage.xml'
                    
                    // Publish HTML coverage report
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        reportName: 'Jest Coverage Report'
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'npm run build'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Deployment steps would go here'
                    // Add your deployment logic
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs and test reports.'
        }
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}