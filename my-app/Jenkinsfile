pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'NodeJS-18'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
    }
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    def projectDir = 'my-app'

                    sh 'npm cache clean --force'

                    if (fileExists("package.json")) {
                        echo "Installing dependencies in root"
                        sh '''
                        rm -rf node_modules package-lock.json
                        npm install 
                        '''
                    } 
                    else if (fileExists("${projectDir}/package.json")) {
                        echo "Installing dependencies in ${projectDir}"
                        dir(projectDir) {
                            sh '''
                            rm -rf node_modules package-lock.json
                            npm install
                            '''
                        }
                    } else {
                        error("package.json not found, aborting.")
                    }
                }
            }
        }

         stage('Run Jest Tests') {
            when { expression { return fileExists('my-app/package.json') || fileExists('package.json') } }
            steps {
                script {
                    // Ensure Jest is configured in package.json
                    if (fileExists('my-app/package.json')) {
                        dir('my-app') { 
                            sh '''
                            # Add Jest test script to package.json if not exists
                            if ! grep -q '"test":.*jest' package.json; then
                                sed -i 's/"scripts": {/"scripts": {\n    "test": "jest",/g' package.json
                            fi
                            
                            # Run Jest tests with coverage and generate reports
                            npm test -- --coverage --coverageReporters=text --coverageReporters=lcov
                            '''
                        }
                    } else {
                        sh '''
                        # Add Jest test script to package.json if not exists
                        if ! grep -q '"test":.*jest' package.json; then
                            sed -i 's/"scripts": {/"scripts": {\n    "test": "jest",/g' package.json
                        fi
                        
                        # Run Jest tests with coverage and generate reports
                        npm test -- --coverage --coverageReporters=text --coverageReporters=lcov
                        '''
                    }
                }
            }
            post {
                always {
                    // Publish Jest test results
                    junit allowEmptyResults: true, testResults: '**/junit.xml'
                    
                    // Publish coverage reports
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        reportName: 'Jest Coverage Report'
                    ])
                }
            }
        }

        stage('Build') {
            when { expression { return fileExists('my-app/package.json') || fileExists('package.json') } }
            steps {
                script {
                    if (fileExists('my-app/package.json')) {
                        dir('my-app') { 
                            sh 'npm run build || echo "Build failed"'
                        }
                    } else {
                        sh 'npm run build || echo "Build failed"'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Starting application...'
                    sh '''
                    nohup npm start > app.log 2>&1 &
                    sleep 5
                    curl -Is http://localhost:3000 || echo "App is not responding"
                    '''

                    echo 'Starting ngrok for public access....'
                    sh '''
                    nohup ngrok http 3000 --region=in --hostname=27a1-115-245-95-234.ngrok-free.app > ngrok.log 2>&1 &
                    sleep 5
                    curl -Is  https://a899-115-245-95-234.ngrok-free.app || echo "Ngrok is not responding"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors.'
        }
    }
}
