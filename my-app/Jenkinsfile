pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'NodeJS-18' 
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                cleanWs()  
                checkout scm 
                sh 'ls -lah' 
            }
        }

        stage('Setup Node.js') {
            steps {
                sh 'node -v'
                sh 'npm -v'
            }
        }

        stage('Verify Project Structure') {
            steps {
                sh 'find . -name "package.json" -type f | sort'
                sh 'pwd'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    def projectDir = 'my-app'

                    sh 'npm cache clean --force'

                    if (fileExists("package.json")) {
                        echo "Installing dependencies in root"
                        sh 'rm -rf node_modules package-lock.json'
                        sh 'npm install --verbose > npm-install.log 2>&1 || cat npm-install.log'
                    } 
                    else if (fileExists("${projectDir}/package.json")) {
                        echo "Installing dependencies in ${projectDir}"
                        dir(projectDir) {
                            sh 'rm -rf node_modules package-lock.json'
                            sh 'npm install --verbose --legacy-peer-deps > npm-install.log 2>&1 || cat npm-install.log'
                        }
                    } else {
                        error("package.json not found, aborting.")
                    }
                }
            }
        }

        stage('Run Linting') {
            when { expression { return fileExists('my-app/package.json') || fileExists('package.json') } }
            steps {
                script {
                    if (fileExists('my-app/package.json')) {
                        dir('my-app') { 
                            sh 'npm run lint || echo "Linting failed"'
                        }
                    } else {
                        sh 'npm run lint || echo "Linting failed"'
                    }
                }
            }
        }

        stage('Run Tests') {
            when { expression { return fileExists('my-app/package.json') || fileExists('package.json') } }
            steps {
                script {
                    if (fileExists('my-app/package.json')) {
                        dir('my-app') { 
                            sh 'npm test || echo "Tests failed"'
                        }
                    } else {
                        sh 'npm test || echo "Tests failed"'
                    }
                }
            }
        }

        stage('Build') {
            when { expression { return fileExists('my-app/package.json') || fileExists('package.json') } }
            steps {
                script {
                    if (fileExists('my-app/package.json')) {
                        dir('my-app') { 
                            sh 'npm run build || echo "Build failed"'
                        }
                    } else {
                        sh 'npm run build || echo "Build failed"'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors.'
        }
    }
}
